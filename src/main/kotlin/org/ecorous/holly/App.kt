/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.ecorous.holly

import com.kotlindiscord.kord.extensions.ExtensibleBot
import com.kotlindiscord.kord.extensions.utils.env
import dev.kord.common.entity.Snowflake
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.datetime.*
import org.ecorous.holly.extensions.TestExtension
import org.ecorous.holly.reminders.DiscordReminder
import org.ecorous.holly.reminders.DiscordRepeatingReminder
import org.ecorous.holly.reminders.Reminder
import org.ecorous.holly.reminders.Reminders
import java.util.Timer
import kotlin.concurrent.schedule
import kotlin.time.Duration.Companion.minutes
import kotlin.time.Duration.Companion.seconds

val TEST_SERVER_ID = Snowflake(
	env("TEST_SERVER").toLong()  // Get the test server ID from the env vars or a .env file
)

val USER_ID = Snowflake(
	env("USER_ID").toLong()  // Get the user ID from the env vars or a .env file
)

private val TOKEN = env("TOKEN")   // Get the bot' token from the env vars or a .env file

lateinit var bot: ExtensibleBot

@OptIn(DelicateCoroutinesApi::class)
suspend fun main() {
	// use while (true) { ... } to run forever
	// use delay(1000) to wait 1 second between each iteration

	DB.setup()
	bot = ExtensibleBot(TOKEN) {

		extensions {
			add(::TestExtension)
		}
	}

	val timer = Timer()
	// check every 10 seconds
	// this is because 1 minute is the minimum frequency
	// we will always be accurate to within 10 seconds.
	// This is as accurate as we can be without wasting resources.
	/*timer.schedule(0.toLong(), 10000.toLong()) {
		val nextCheck = (Clock.System.now()+ 10.seconds).toLocalDateTime(TimeZone.currentSystemDefault())
		println("Checking reminders...")
		println("Next check: ${nextCheck.hour}:${nextCheck.minute}:${nextCheck.second}")
		GlobalScope.launch {
			Reminders.checkAll()
		}
	}*/
	Reminders.schedule(DiscordReminder.new {
		title = "Test Reminder (non-repeating)"
		message = "This is a test reminder!"
		frequency = Frequency(FrequencyType.MINUTE, 1)
		lastCompleted = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault())
		dueTime = Clock.System.now() + 1.minutes
	})
	Reminders.schedule(DiscordRepeatingReminder.new {
		title = "Test Reminder (repeating)"
		message = "This is a test reminder!"
		frequency = Frequency(FrequencyType.MINUTE, 1)
		lastCompleted = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault())
		dueTime = Clock.System.now() + 1.minutes
	})
	bot.start()


}

val LocalDateTime.timeFormat: String
	get() = "$hour:$minute:$second"

val LocalDateTime.dateFormat: String
	get() = "$dayOfMonth/$monthNumber/$year"

val LocalDateTime.dateTimeFormat: String
	get() = "$dateFormat $timeFormat"
